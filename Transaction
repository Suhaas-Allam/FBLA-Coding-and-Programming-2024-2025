import java.util.*; // Importing utility classes like List, ArrayList, and Date
import java.text.SimpleDateFormat; // Importing SimpleDateFormat for formatting dates


/**
* Represents a financial transaction, either an income or an expense.
*/
public class Transaction {


   // Instance variables to store transaction details
   private String type; // Type of transaction: "Income" or "Expense"
   private String category; // Category of the transaction, e.g., "Food", "Rent", etc.
   private double amount; // Amount of the transaction
   private Date date; // Date when the transaction occurred
   private String description; // Description or note about the transaction


   /**
    * Constructor to initialize a Transaction object with its attributes.
    *
    * @param type        The type of transaction ("Income" or "Expense").
    * @param category    The category of the transaction.
    * @param amount      The amount of money involved in the transaction.
    * @param date        The date of the transaction.
    * @param description A description of the transaction.
    */
   public Transaction(String type, String category, double amount, Date date, String description) {
       this.type = type;
       this.category = category;
       this.amount = amount;
       this.date = date;
       this.description = description;
   }


   // Getter methods for accessing private fields
   public String getType() {
       return type;
   }


   public String getCategory() {
       return category;
   }


   public double getAmount() {
       return amount;
   }


   public Date getDate() {
       return date;
   }


   public String getDescription() {
       return description;
   }


   /**
    * Returns a string representation of the transaction.
    *
    * @return A formatted string with transaction details.
    */
   @Override
   public String toString() {
       SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
       return String.format("[%s] %s | %s: $%.2f | %s", dateFormat.format(date), type, category, amount, description);
   }
}


/**
* Manages financial transactions and provides methods to add, filter, and analyze them.
*/
class FinanceManager {
   private List<Transaction> transactions = new ArrayList<>(); // List to store all transactions


   /**
    * Adds a new transaction to the list.
    *
    * @param type        The type of transaction ("Income" or "Expense").
    * @param category    The category of the transaction.
    * @param amount      The amount of money involved in the transaction.
    * @param date        The date of the transaction.
    * @param description A description of the transaction.
    */
   public void addTransaction(String type, String category, double amount, Date date, String description) {
       transactions.add(new Transaction(type, category, amount, date, description));
   }


   /**
    * Calculates and returns the net balance of all transactions.
    *
    * @return The net balance (Income - Expenses).
    */
   public double getBalance() {
       double balance = 0;
       for (Transaction t : transactions) {
           if (t.getType().equals("Income")) {
               balance += t.getAmount(); // Add income amounts
           } else {
               balance -= t.getAmount(); // Subtract expense amounts
           }
       }
       return balance;
   }


   /**
    * Returns a list of all transactions.
    *
    * @return The list of transactions.
    */
   public List<Transaction> getTransactions() {
       return transactions;
   }


   /**
    * Filters transactions based on specified criteria.
    *
    * @param startDate Start date of the filtering period (inclusive).
    * @param endDate   End date of the filtering period (inclusive).
    * @param type      Type of transaction to filter ("Income" or "Expense").
    * @param category  Category of the transaction to filter.
    * @return A list of transactions matching the filter criteria.
    */
   public List<Transaction> filterTransactions(Date startDate, Date endDate, String type, String category) {
       List<Transaction> filtered = new ArrayList<>();
       for (Transaction t : transactions) {
           if ((type == null || t.getType().equals(type)) &&
                   (category == null || t.getCategory().equals(category)) &&
                   (startDate == null || !t.getDate().before(startDate)) &&
                   (endDate == null || !t.getDate().after(endDate))) {
               filtered.add(t); // Add transactions that match all criteria
           }
       }
       return filtered;
   }


   /**
    * Deletes a transaction from the list based on its index.
    *
    * @param index The 1-based index of the transaction to delete.
    */
   public void deleteTransaction(int index) {
       if (index >= 1 && index <= transactions.size()) {
           transactions.remove(index - 1); // Remove transaction (adjusted for 0-based index)
       } else {
           System.out.println("Invalid transaction index."); // Print error message if index is invalid
       }
   }


   /**
    * Prints a summary of income, expenses, and net balance for a given date range.
    *
    * @param startDate Start date of the summary period (inclusive).
    * @param endDate   End date of the summary period (inclusive).
    */
   public void printSummary(Date startDate, Date endDate) {
       double income = 0, expenses = 0;
       for (Transaction t : filterTransactions(startDate, endDate, null, null)) {
           if (t.getType().equals("Income")) {
               income += t.getAmount(); // Sum income transactions
           } else {
               expenses += t.getAmount(); // Sum expense transactions
           }
       }
       System.out.printf("Income: $%.2f | Expenses: $%.2f | Net: $%.2f%n", income, expenses, income - expenses);
   }


   /**
    * Prints spending totals grouped by category for a given date range.
    *
    * @param startDate Start date of the period (inclusive).
    * @param endDate   End date of the period (inclusive).
    */
   public void printSpendingByCategory(Date startDate, Date endDate) {
       Map<String, Double> categoryTotals = new HashMap<>();
       for (Transaction t : filterTransactions(startDate, endDate, "Expense", null)) {
           categoryTotals.put(t.getCategory(),
                   categoryTotals.getOrDefault(t.getCategory(), 0.0) + t.getAmount()); // Sum amounts by category
       }
       for (Map.Entry<String, Double> entry : categoryTotals.entrySet()) {
           System.out.printf("%s: $%.2f%n", entry.getKey(), entry.getValue()); // Print category totals
       }
   }
}

